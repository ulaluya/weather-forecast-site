document.addEventListener('DOMContentLoaded', () => {
    const cityInput = document.getElementById('city-input');
    const searchButton = document.getElementById('search-button');
    const weatherInfo = document.getElementById('weather-info');
    const forecastInfo = document.getElementById('forecast-info');

    const apiKey = 'abc252d7251b9e71445c2511d7221cb9'; 

    function getDeclinedCity(city) {
        const lastLetter = city.slice(-1).toLowerCase();
        const secondToLastLetter = city.slice(-2, -1).toLowerCase();
        
        if (lastLetter === '–∞') {
            return city.slice(0, -1) + '–µ';
        } else if (lastLetter === '—è') {
            return city.slice(0, -1) + '–µ';
        } else if (lastLetter === '–π' || lastLetter === '—å') {
            return city.slice(0, -1) + '–µ';
        } else if (lastLetter === '–æ' || lastLetter === '–∏') {
            return city;
        } else if (city.toLowerCase() === '–∫–∏–ø—Ä') {
            return '–ö–∏–ø—Ä–µ';
        } else if (city.toLowerCase() === '–º–∏–Ω—Å–∫') {
            return '–ú–∏–Ω—Å–∫–µ';
        }
        
        return city;
    }

    function getWeatherIcon(weatherCondition) {
        const iconMap = {
            '—è—Å–Ω–æ': '‚òÄÔ∏è',
            '–ø–∞—Å–º—É—Ä–Ω–æ': '‚òÅÔ∏è',
            '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å': '‚õÖ',
            '–¥–æ–∂–¥—å': 'üåßÔ∏è',
            '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å': 'üå¶Ô∏è',
            '–≥—Ä–æ–∑–∞': '‚õàÔ∏è',
            '—Å–Ω–µ–≥': '‚ùÑÔ∏è',
            '—Ç—É–º–∞–Ω': 'üå´Ô∏è',
            '–º–≥–ª–∞': 'üå´Ô∏è',
            '–¥—ã–º–∫–∞': 'üå´Ô∏è',
            '—Å–ª–∞–±—ã–π –¥–æ–∂–¥—å': 'üåßÔ∏è'
        };
        return iconMap[weatherCondition.toLowerCase()] || '‚ùì';
    }

    function fetchWeatherData(city) {
        const currentUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric&lang=ru`;
        const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=metric&lang=ru`;

        weatherInfo.innerHTML = '<p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>';
        forecastInfo.innerHTML = '';

        fetch(currentUrl)
            .then(response => response.json())
            .then(data => {
                if (data.cod === 200) {
                    const temp = data.main.temp;
                    const description = data.weather[0].description;
                    const humidity = data.main.humidity;
                    const windSpeed = data.wind.speed;
                    const weatherIcon = getWeatherIcon(description);
                    const declinedCity = getDeclinedCity(city);

                    weatherInfo.innerHTML = `
                        <h2>–ü–æ–≥–æ–¥–∞ –≤ ${declinedCity}</h2>
                        <div style="font-size: 3rem;">${weatherIcon}</div>
                        <p>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temp}¬∞C</p>
                        <p>–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${description}</p>
                        <p>–í–ª–∞–∂–Ω–æ—Å—Ç—å: ${humidity}%</p>
                        <p>–í–µ—Ç–µ—Ä: ${windSpeed} –º/—Å</p>
                    `;
                } else {
                    weatherInfo.innerHTML = '<p>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥.</p>';
                }
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
                weatherInfo.innerHTML = '<p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>';
            });

        fetch(forecastUrl)
            .then(response => response.json())
            .then(data => {
                if (data.cod === '200') {
                    const dailyForecasts = data.list.filter(item => item.dt_txt.includes("12:00:00"));
                    forecastInfo.innerHTML = dailyForecasts.map(item => {
                        const date = new Date(item.dt * 1000);
                        const day = date.toLocaleDateString('ru-RU', { weekday: 'short' });
                        const temp = item.main.temp.toFixed(0);
                        const icon = getWeatherIcon(item.weather[0].description);
                        
                        return `
                            <div class="forecast-item">
                                <p>${day}</p>
                                <div class="icon">${icon}</div>
                                <p>${temp}¬∞C</p>
                            </div>
                        `;
                    }).join('');
                }
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞:', error);
            });
    }

    searchButton.addEventListener('click', () => {
        const city = cityInput.value.trim();
        if (city === '') {
            weatherInfo.innerHTML = '<p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.</p>';
            forecastInfo.innerHTML = '';
            return;
        }
        fetchWeatherData(city);
    });
});
